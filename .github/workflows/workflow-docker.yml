name: docker

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
  # Update docker hub retention policy
  schedule:
    - cron: "21 7 8 * *"

env:
  DOCKER_USERNAME: "yakim"
  PROJECT_NAME: "feed_watchdog"
  REGISTRY: ""
  DOCKER_BUILDKIT: "1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: read-all

jobs:
  checks:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set Image full name variable
        run: echo "IMAGE_FULL_NAME=$(echo ${DOCKER_USERNAME}/${PROJECT_NAME})" >> $GITHUB_ENV

      - name: Run checks
        run: |
          echo "Checking config"
          echo "Running checks"
          pip install pre-commit
          cd backend
          pre-commit run --all-files

  # Releasing image, when in `master` branch or tag
  release-image:
    runs-on: ubuntu-latest
    needs: [checks]
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - name: Set Image full name variable
        run: echo "IMAGE_FULL_NAME=$(echo ${DOCKER_USERNAME}/${PROJECT_NAME})" >> $GITHUB_ENV

      - name: Prepare docker
        run: |
          echo "Login into Docker registry"
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login "$REGISTRY" -u "$DOCKER_USERNAME" --password-stdin
          echo "Debug information"
          docker info && docker-compose --version && git --version

      - name: Pull cache
        run: |
          docker pull "${IMAGE_FULL_NAME}:latest" || true
          docker tag "${IMAGE_FULL_NAME}:latest" "${PROJECT_NAME}:latest" || true

      - name: Build image
        run: |
          echo "Building frontend image"
          cd frontend
          docker build -t feed_watchdog_frontend . && cd ..
          echo "Building backend image"
          python -m venv .venv
          source .venv/bin/activate
          pip install poetry==1.5.1
          poetry self add poetry-multiproject-plugin
          poetry self add poetry-polylith-plugin
          cd backend/projects/feed_watchdog_api
          poetry build-project
          docker build -t feed_watchdog .
          docker tag feed_watchdog "${IMAGE_FULL_NAME}:latest"

      - name: Set version env (GITHUB_REF:10 for extract version from non-v-tags without the 'refs/tags/' prefix)
        run: echo "VERSION=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV
      - name: Set short version env
        run: echo "SHORT_VERSION=$(echo ${VERSION%.*})" >> $GITHUB_ENV

      - name: Add version tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml build feed_watchdog
          docker tag "${IMAGE_FULL_NAME}:latest" "${IMAGE_FULL_NAME}:${VERSION}"
          docker tag "${IMAGE_FULL_NAME}:latest" "${IMAGE_FULL_NAME}:${SHORT_VERSION}"

      - name: Push production images
        run: |
          echo "Showing debug information"
          docker image ls
          docker push "${IMAGE_FULL_NAME}" --all-tags

  deploy:
    name: Deploy To Production
    runs-on: ubuntu-latest
    needs: [release-image]
    steps:
      - name: install ssh keys
        # check this thread to understand why its needed:
        # https://stackoverflow.com/a/70447517
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} -p  > ~/.ssh/known_hosts
      - name: connect and update
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} -p ${{ secrets.SSH_PORT }} \
            "cd ~/projects && ./update_feed_watchdog.sh"
      - name: cleanup
        run: rm -rf ~/.ssh
